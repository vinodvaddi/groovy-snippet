// Initialiser

import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.event.type.EventDispatchOption
import com.atlassian.jira.issue.Issue
import com.atlassian.jira.issue.link.IssueLink
import com.atlassian.jira.issue.link.IssueLinkManager
import com.atlassian.jira.issue.fields.CustomField
import com.onresolve.jira.groovy.user.FormField

String action = getActionName()

FormField editFF = getFieldById("Edit")
if(editFF != null) {
	String edit = editFF.value
    if("Update".equals(edit)) {
		FormField applicationInitFF = getFieldByName("applicationInit")
		FormField assigneeFF = getFieldById("assignee")
		applicationInitFF?.setFormValue("false")
        assigneeFF?.setHidden(true)
    }
}

if("Create".equals(action)) {
//    getFieldByName("Assignment Group")?.setRequired(true)
//    getFieldByName("Requestor's Business Unit & Sub Business Unit")?.setRequired(true)
//    getFieldByName("Application")?.setRequired(true)
//    getFieldByName("BU/COE & Sub BU/COE")?.setRequired(true)
}

//If Priority is visible on Create/Edit form hide this field
FormField priorityFF = getFieldById("priority")
priorityFF?.setHidden(true)

if("Change Completed".equals(action)) {
    FormField isBackoutFF = getFieldByName("isBackout")
    String isBackout = isBackoutFF.value
    if("Yes".equals(isBackout)) {
	    FormField closeCodeFF = getFieldById("customfield_11200")

	    def closeCodeCf = customFieldManager.getCustomFieldObject(11200l)
        def config = closeCodeCf.getRelevantConfig(issueContext)
        def optionsManager = ComponentAccessor.optionsManager
        def options = optionsManager.getOptions(config)
        int index = options.findIndexOf { it.value == "Backed Out" }
        closeCodeFF.setFormValue(options.get(index).optionId)
        closeCodeFF.setReadOnly(true)
    }
} else if("Create".equals(action) || "Request for approval".equals(action) ) {
    FormField resultField = getFieldById("customfield_10103")
    resultField?.setHidden(true)
}


//Fields

import com.onresolve.jira.groovy.user.FormField
import com.atlassian.crowd.embedded.api.User
import com.atlassian.jira.component.ComponentAccessor

def userManager = ComponentAccessor.getUserManager()
def groupManager = ComponentAccessor.getGroupManager()
List <String> myList = new ArrayList <String>();

def field1 = getFieldByName("After Action RFC")
def field2 = getFieldByName("CMS Change")
def field3 = getFieldByName("Security review")
def field4 = getFieldByName("Technical Manager")
def field5 = getFieldByName("Business Owner")
def field6 = getFieldByName("Support Manager")

def value1 = field1.getValue()
def value2 = field2.getValue()
def value3 = field3.getValue()

String value4 = field4.getValue()
String value5 = field5.getValue()
String value6 = field6.getValue()

if (value1 == "No" && value2 == "Yes" && value3 == "Yes") {
    myList.clear();
    def group1 = userManager.getGroup("Application security group")
    def group2 = userManager.getGroup("Security Approval Group")
    def group3 = userManager.getGroup("Change Managers")

    def usersInGroup1 = groupManager.getUsersInGroup(group1)
    def usersInGroup2 = groupManager.getUsersInGroup(group2)
    def usersInGroup3 = groupManager.getUsersInGroup(group3)

    usersInGroup1.each {
        myList.add(it.username);
    }

    usersInGroup2.each {
        myList.add(it.username);
    }

    usersInGroup3.each {
        myList.add(it.username);
    }
}

if (value1 == "No" && value2 == "No" && value3 == "Yes") {
    myList.clear();
    def group4 = userManager.getGroup("Corp.InfoSecEngineering")
    def group5 = userManager.getGroup("Change Managers")


    def usersInGroup4 = groupManager.getUsersInGroup(group4)
    def usersInGroup5 = groupManager.getUsersInGroup(group5)

    usersInGroup4.each {
        myList.add(it.username);
    }

    usersInGroup5.each {
        myList.add(it.username);
    }
}

if (value1 == "No" && value2 == "Yes" && value3 == "No") {

    //Security Approval Group
    //Change Mangers
    //CAB

    myList.clear();
    def group6 = userManager.getGroup("Security Approval Group")
    def group7 = userManager.getGroup("Change Managers")

    def usersInGroup6 = groupManager.getUsersInGroup(group6)
    def usersInGroup7 = groupManager.getUsersInGroup(group7)

    usersInGroup6.each {
        myList.add(it.username);
    }

    usersInGroup7.each {
        myList.add(it.username);
    }
}

if (value1 == "No" && value2 == "No" && value3 == "No") {
    //Change Mangers
    //CAB

    myList.clear();
    def group8 = userManager.getGroup("Change Managers")
    def usersInGroup8 = groupManager.getUsersInGroup(group8)

    usersInGroup8.each {
       myList.add(it.username);
    }
}
 
if (value4) {
    myList.add(value4.toString());
}

String issueTypeName = getIssueContext().issueType.name
if (!"Emergency Change Request".equals(issueTypeName) && value5) {
    myList.add(value5.toString());
}

if (value6) {
    myList.add(value6.toString());
}

FormField resultField = getFieldById("customfield_10103")
resultField.setFormValue(myList.toArray().toString().replace('[','').replace(']',''));



//CMS Change

import com.onresolve.jira.groovy.user.FormField
import com.atlassian.crowd.embedded.api.User
import com.atlassian.jira.component.ComponentAccessor

def userManager = ComponentAccessor.getUserManager()
def groupManager = ComponentAccessor.getGroupManager()
List <String> myList = new ArrayList <String>();

def field1 = getFieldByName("After Action RFC")
def field2 = getFieldByName("CMS Change")
def field3 = getFieldByName("Security review")
def field4 = getFieldByName("Technical Manager")
def field5 = getFieldByName("Business Owner")
def field6 = getFieldByName("Support Manager")

def value1 = field1.getValue()
def value2 = field2.getValue()
def value3 = field3.getValue()

String value4 = field4.getValue()
String value5 = field5.getValue()
String value6 = field6.getValue()

if (value1 == "No" && value2 == "Yes" && value3 == "Yes") {
    myList.clear();
    def group1 = userManager.getGroup("Application security group")
    def group2 = userManager.getGroup("Security Approval Group")
    def group3 = userManager.getGroup("Change Managers")

    def usersInGroup1 = groupManager.getUsersInGroup(group1)
    def usersInGroup2 = groupManager.getUsersInGroup(group2)
    def usersInGroup3 = groupManager.getUsersInGroup(group3)

    usersInGroup1.each {
        myList.add(it.username);
    }

    usersInGroup2.each {
        myList.add(it.username);
    }

    usersInGroup3.each {
        myList.add(it.username);
    }
}

if (value1 == "No" && value2 == "No" && value3 == "Yes") {
    myList.clear();
    def group4 = userManager.getGroup("Corp.InfoSecEngineering")
    def group5 = userManager.getGroup("Change Managers")


    def usersInGroup4 = groupManager.getUsersInGroup(group4)
    def usersInGroup5 = groupManager.getUsersInGroup(group5)

    usersInGroup4.each {
        myList.add(it.username);
    }

    usersInGroup5.each {
        myList.add(it.username);
    }
}

if (value1 == "No" && value2 == "Yes" && value3 == "No") {

    //Security Approval Group
    //Change Mangers
    //CAB

    myList.clear();
    def group6 = userManager.getGroup("Security Approval Group")
    def group7 = userManager.getGroup("Change Managers")

    def usersInGroup6 = groupManager.getUsersInGroup(group6)
    def usersInGroup7 = groupManager.getUsersInGroup(group7)

    usersInGroup6.each {
        myList.add(it.username);
    }

    usersInGroup7.each {
        myList.add(it.username);
    }
}

if (value1 == "No" && value2 == "No" && value3 == "No") {
    //Change Mangers
    //CAB

    myList.clear();
    def group8 = userManager.getGroup("Change Managers")
    def usersInGroup8 = groupManager.getUsersInGroup(group8)

    usersInGroup8.each {
       myList.add(it.username);
    }
}
 
if (value4) {
    myList.add(value4.toString());
}

String issueTypeName = getIssueContext().issueType.name
if (!"Emergency Change Request".equals(issueTypeName) && value5) {
    myList.add(value5.toString());
}

if (value6) {
    myList.add(value6.toString());
}

FormField resultField = getFieldById("customfield_10103")
resultField.setFormValue(myList.toArray().toString().replace('[','').replace(']',''));


//Show CMS Tab


def listOfQuestions = ["1. Will change(s) to system effect how the system limits:",
                       "10. Will change(s) to the system effect how:",
                      "2. Will change(s) affect required system training to ensure that personnel are adequately trained to carry out their assigned information security-related duties and responsibilities?",
                      "3. Will change(s) affect system audit requirements to:",
                      "4. Will change(s) to the system impact the:",
                      "5. Will change(s) to the system impact how it:",
                      "6. Will change(s) to the system impact how:",
                      "7. Will change(s) to the system impact how:",
                      "8. Will change(s) to the system/system environment change how:",
                      "9. Will change(s) to the system effect how:"]

if(value2=="Yes"){
    showTab(4)
     listOfQuestions.each{
        def field=getFieldByName("${it}")
        field.setRequired(true)
    }
} else {
	hideTab(4)
      listOfQuestions.each{
        def field=getFieldByName("${it}")
        field.setRequired(false)
        field.setFormValue("")
    }
}





//Security Review

import com.onresolve.jira.groovy.user.FormField
import com.atlassian.crowd.embedded.api.User
import com.atlassian.jira.component.ComponentAccessor

def userManager = ComponentAccessor.getUserManager()
def groupManager = ComponentAccessor.getGroupManager()
List <String> myList = new ArrayList <String>();

def field1 = getFieldByName("After Action RFC")
def field2 = getFieldByName("CMS Change")
def field3 = getFieldByName("Security review")
def field4 = getFieldByName("Technical Manager")
def field5 = getFieldByName("Business Owner")
def field6 = getFieldByName("Support Manager")

def value1 = field1.getValue()
def value2 = field2.getValue()
def value3 = field3.getValue()

String value4 = field4.getValue()
String value5 = field5.getValue()
String value6 = field6.getValue()

if (value1 == "No" && value2 == "Yes" && value3 == "Yes") {
    myList.clear();
    def group1 = userManager.getGroup("Application security group")
    def group2 = userManager.getGroup("Security Approval Group")
    def group3 = userManager.getGroup("Change Managers")

    def usersInGroup1 = groupManager.getUsersInGroup(group1)
    def usersInGroup2 = groupManager.getUsersInGroup(group2)
    def usersInGroup3 = groupManager.getUsersInGroup(group3)

    usersInGroup1.each {
        myList.add(it.username);
    }

    usersInGroup2.each {
        myList.add(it.username);
    }

    usersInGroup3.each {
        myList.add(it.username);
    }
}

if (value1 == "No" && value2 == "No" && value3 == "Yes") {
    myList.clear();
    def group4 = userManager.getGroup("Corp.InfoSecEngineering")
    def group5 = userManager.getGroup("Change Managers")


    def usersInGroup4 = groupManager.getUsersInGroup(group4)
    def usersInGroup5 = groupManager.getUsersInGroup(group5)

    usersInGroup4.each {
        myList.add(it.username);
    }

    usersInGroup5.each {
        myList.add(it.username);
    }
}

if (value1 == "No" && value2 == "Yes" && value3 == "No") {

    //Security Approval Group
    //Change Mangers
    //CAB

    myList.clear();
    def group6 = userManager.getGroup("Security Approval Group")
    def group7 = userManager.getGroup("Change Managers")

    def usersInGroup6 = groupManager.getUsersInGroup(group6)
    def usersInGroup7 = groupManager.getUsersInGroup(group7)

    usersInGroup6.each {
        myList.add(it.username);
    }

    usersInGroup7.each {
        myList.add(it.username);
    }
}

if (value1 == "No" && value2 == "No" && value3 == "No") {
    //Change Mangers
    //CAB

    myList.clear();
    def group8 = userManager.getGroup("Change Managers")
    def usersInGroup8 = groupManager.getUsersInGroup(group8)

    usersInGroup8.each {
       myList.add(it.username);
    }
}
 
if (value4) {
    myList.add(value4.toString());
}

String issueTypeName = getIssueContext().issueType.name
if (!"Emergency Change Request".equals(issueTypeName) && value5) {
    myList.add(value5.toString());
}

if (value6) {
    myList.add(value6.toString());
}

FormField resultField = getFieldById("customfield_10103")
resultField.setFormValue(myList.toArray().toString().replace('[','').replace(']',''));




//Technical Manager

import com.onresolve.jira.groovy.user.FormField
import com.atlassian.crowd.embedded.api.User
import com.atlassian.jira.component.ComponentAccessor

def userManager = ComponentAccessor.getUserManager()
def groupManager = ComponentAccessor.getGroupManager()
List <String> myList = new ArrayList <String>();

def field1 = getFieldByName("After Action RFC")
def field2 = getFieldByName("CMS Change")
def field3 = getFieldByName("Security review")
def field4 = getFieldByName("Technical Manager")
def field5 = getFieldByName("Business Owner")
def field6 = getFieldByName("Support Manager")

def value1 = field1.getValue()
def value2 = field2.getValue()
def value3 = field3.getValue()

String value4 = field4.getValue()
String value5 = field5.getValue()
String value6 = field6.getValue()

if (value1 == "No" && value2 == "Yes" && value3 == "Yes") {
    myList.clear();
    def group1 = userManager.getGroup("Application security group")
    def group2 = userManager.getGroup("Security Approval Group")
    def group3 = userManager.getGroup("Change Managers")

    def usersInGroup1 = groupManager.getUsersInGroup(group1)
    def usersInGroup2 = groupManager.getUsersInGroup(group2)
    def usersInGroup3 = groupManager.getUsersInGroup(group3)

    usersInGroup1.each {
        myList.add(it.username);
    }

    usersInGroup2.each {
        myList.add(it.username);
    }

    usersInGroup3.each {
        myList.add(it.username);
    }
}

if (value1 == "No" && value2 == "No" && value3 == "Yes") {
    myList.clear();
    def group4 = userManager.getGroup("Corp.InfoSecEngineering")
    def group5 = userManager.getGroup("Change Managers")


    def usersInGroup4 = groupManager.getUsersInGroup(group4)
    def usersInGroup5 = groupManager.getUsersInGroup(group5)

    usersInGroup4.each {
        myList.add(it.username);
    }

    usersInGroup5.each {
        myList.add(it.username);
    }
}

if (value1 == "No" && value2 == "Yes" && value3 == "No") {

    //Security Approval Group
    //Change Mangers
    //CAB

    myList.clear();
    def group6 = userManager.getGroup("Security Approval Group")
    def group7 = userManager.getGroup("Change Managers")

    def usersInGroup6 = groupManager.getUsersInGroup(group6)
    def usersInGroup7 = groupManager.getUsersInGroup(group7)

    usersInGroup6.each {
        myList.add(it.username);
    }

    usersInGroup7.each {
        myList.add(it.username);
    }
}

if (value1 == "No" && value2 == "No" && value3 == "No") {
    //Change Mangers
    //CAB

    myList.clear();
    def group8 = userManager.getGroup("Change Managers")
    def usersInGroup8 = groupManager.getUsersInGroup(group8)

    usersInGroup8.each {
       myList.add(it.username);
    }
}
 
if (value4) {
    myList.add(value4.toString());
}

String issueTypeName = getIssueContext().issueType.name
if (!"Emergency Change Request".equals(issueTypeName) && value5) {
    myList.add(value5.toString());
}

if (value6) {
    myList.add(value6.toString());
}

FormField resultField = getFieldById("customfield_10103")
resultField.setFormValue(myList.toArray().toString().replace('[','').replace(']',''));




//Business Owner


import com.onresolve.jira.groovy.user.FormField
import com.atlassian.crowd.embedded.api.User
import com.atlassian.jira.component.ComponentAccessor

def userManager = ComponentAccessor.getUserManager()
def groupManager = ComponentAccessor.getGroupManager()
List <String> myList = new ArrayList <String>();

def field1 = getFieldByName("After Action RFC")
def field2 = getFieldByName("CMS Change")
def field3 = getFieldByName("Security review")
def field4 = getFieldByName("Technical Manager")
def field5 = getFieldByName("Business Owner")
def field6 = getFieldByName("Support Manager")

def value1 = field1.getValue()
def value2 = field2.getValue()
def value3 = field3.getValue()

String value4 = field4.getValue()
String value5 = field5.getValue()
String value6 = field6.getValue()

if (value1 == "No" && value2 == "Yes" && value3 == "Yes") {
    myList.clear();
    def group1 = userManager.getGroup("Application security group")
    def group2 = userManager.getGroup("Security Approval Group")
    def group3 = userManager.getGroup("Change Managers")

    def usersInGroup1 = groupManager.getUsersInGroup(group1)
    def usersInGroup2 = groupManager.getUsersInGroup(group2)
    def usersInGroup3 = groupManager.getUsersInGroup(group3)

    usersInGroup1.each {
        myList.add(it.username);
    }

    usersInGroup2.each {
        myList.add(it.username);
    }

    usersInGroup3.each {
        myList.add(it.username);
    }
}

 

if (value1 == "No" && value2 == "No" && value3 == "Yes") {
    myList.clear();
    def group4 = userManager.getGroup("Corp.InfoSecEngineering")
    def group5 = userManager.getGroup("Change Managers")


    def usersInGroup4 = groupManager.getUsersInGroup(group4)
    def usersInGroup5 = groupManager.getUsersInGroup(group5)

    usersInGroup4.each {
        myList.add(it.username);
    }

    usersInGroup5.each {
        myList.add(it.username);
    }
}

if (value1 == "No" && value2 == "Yes" && value3 == "No") {

    //Security Approval Group
    //Change Mangers
    //CAB

    myList.clear();
    def group6 = userManager.getGroup("Security Approval Group")
    def group7 = userManager.getGroup("Change Managers")

    def usersInGroup6 = groupManager.getUsersInGroup(group6)
    def usersInGroup7 = groupManager.getUsersInGroup(group7)

    usersInGroup6.each {
        myList.add(it.username);
    }

    usersInGroup7.each {
        myList.add(it.username);
    }
}

 

if (value1 == "No" && value2 == "No" && value3 == "No") {
    //Change Mangers
    //CAB

    myList.clear();
    def group8 = userManager.getGroup("Change Managers")
    def usersInGroup8 = groupManager.getUsersInGroup(group8)

    usersInGroup8.each {
       myList.add(it.username);
    }
}
 
if (value4) {
    myList.add(value4.toString());
}

String issueTypeName = getIssueContext().issueType.name
if (!"Emergency Change Request".equals(issueTypeName) && value5) {
    myList.add(value5.toString());
}

if (value6) {
    myList.add(value6.toString());
}

FormField resultField = getFieldById("customfield_10103")
resultField.setFormValue(myList.toArray().toString().replace('[','').replace(']',''));




//Support Manager

import com.onresolve.jira.groovy.user.FormField
import com.atlassian.crowd.embedded.api.User
import com.atlassian.jira.component.ComponentAccessor

def userManager = ComponentAccessor.getUserManager()
def groupManager = ComponentAccessor.getGroupManager()
List <String> myList = new ArrayList <String>();

def field1 = getFieldByName("After Action RFC")
def field2 = getFieldByName("CMS Change")
def field3 = getFieldByName("Security review")
def field4 = getFieldByName("Technical Manager")
def field5 = getFieldByName("Business Owner")
def field6 = getFieldByName("Support Manager")

def value1 = field1.getValue()
def value2 = field2.getValue()
def value3 = field3.getValue()

String value4 = field4.getValue()
String value5 = field5.getValue()
String value6 = field6.getValue()

if (value1 == "No" && value2 == "Yes" && value3 == "Yes") {
    myList.clear();
    def group1 = userManager.getGroup("Application security group")
    def group2 = userManager.getGroup("Security Approval Group")
    def group3 = userManager.getGroup("Change Managers")

    def usersInGroup1 = groupManager.getUsersInGroup(group1)
    def usersInGroup2 = groupManager.getUsersInGroup(group2)
    def usersInGroup3 = groupManager.getUsersInGroup(group3)

    usersInGroup1.each {
        myList.add(it.username);
    }

    usersInGroup2.each {
        myList.add(it.username);
    }

    usersInGroup3.each {
        myList.add(it.username);
    }
}

 

if (value1 == "No" && value2 == "No" && value3 == "Yes") {
    myList.clear();
    def group4 = userManager.getGroup("Corp.InfoSecEngineering")
    def group5 = userManager.getGroup("Change Managers")


    def usersInGroup4 = groupManager.getUsersInGroup(group4)
    def usersInGroup5 = groupManager.getUsersInGroup(group5)

    usersInGroup4.each {
        myList.add(it.username);
    }

    usersInGroup5.each {
        myList.add(it.username);
    }
}

if (value1 == "No" && value2 == "Yes" && value3 == "No") {

    //Security Approval Group
    //Change Mangers
    //CAB

    myList.clear();
    def group6 = userManager.getGroup("Security Approval Group")
    def group7 = userManager.getGroup("Change Managers")

    def usersInGroup6 = groupManager.getUsersInGroup(group6)
    def usersInGroup7 = groupManager.getUsersInGroup(group7)

    usersInGroup6.each {
        myList.add(it.username);
    }

    usersInGroup7.each {
        myList.add(it.username);
    }
}

 

if (value1 == "No" && value2 == "No" && value3 == "No") {
    //Change Mangers
    //CAB

    myList.clear();
    def group8 = userManager.getGroup("Change Managers")
    def usersInGroup8 = groupManager.getUsersInGroup(group8)

    usersInGroup8.each {
       myList.add(it.username);
    }
}
 
if (value4) {
    myList.add(value4.toString());
}

String issueTypeName = getIssueContext().issueType.name
if (!"Emergency Change Request".equals(issueTypeName) && value5) {
    myList.add(value5.toString());
}

if (value6) {
    myList.add(value6.toString());
}

FormField resultField = getFieldById("customfield_10103")
resultField.setFormValue(myList.toArray().toString().replace('[','').replace(']',''));




//CAB 


import com.onresolve.jira.groovy.user.FormField

 

import com.atlassian.crowd.embedded.api.User

import com.atlassian.jira.component.ComponentAccessor

def userManager = ComponentAccessor.getUserManager()

def groupManager = ComponentAccessor.getGroupManager()

 

List <String> myList = new ArrayList<String>();

 

 

def group1 = userManager.getGroup("CAB")

//Security Approval Group

//Change Mangers

//CAB

def usersInGroup1 = groupManager.getUsersInGroup(group1)

usersInGroup1.each {

    myList.add(it.username);

}

FormField resultField = getFieldById("customfield_10120")
resultField.setFormValue(myList.toArray()); 




//Business Communication Needed


import com.onresolve.jira.groovy.user.FormField

FormField bcnFF = getFieldById(getFieldChanged())
String bcn = bcnFF.value.toString()

FormField dtcFF = getFieldByName("DLs to Communicate?")
FormField tocFF = getFieldByName("Text Of Communication")

if("Yes".equals(bcn)) {
    dtcFF?.setRequired(true)
    dtcFF?.setHidden(false)
    tocFF?.setRequired(true)
    tocFF?.setHidden(false)    
} else {
    dtcFF?.setRequired(false)
    dtcFF?.setHidden(true)
    tocFF?.setRequired(false)
    tocFF?.setHidden(true)        
}



//RollBack Process Tested


import com.onresolve.jira.groovy.user.FormField
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.issue.customfields.manager.OptionsManager
import com.atlassian.jira.issue.fields.CustomField
import com.onresolve.jira.groovy.user.FormField

FormField rptlFF = getFieldByName("Rollback Process Tested")
FormField riskImpactFF = getFieldByName("Risk Impact")
FormField maFF = getFieldByName("Mitigation Activity")
FormField rtFF = getFieldByName("Recover Time")
FormField changeRiskFF = getFieldByName("Change Risk")

String rptl = rptlFF.getValue()
String riskImpact = riskImpactFF.getValue()
String ma = maFF.getValue()
String rt = rtFF.getValue()

int score = 0

def customFieldManager = ComponentAccessor.customFieldManager
CustomField customField = customFieldManager.getCustomFieldObjectByName("Change Risk")
def fieldConfig = customField.getRelevantConfig(issueContext)
OptionsManager optionsManager = ComponentAccessor.optionsManager
def options = optionsManager.getOptions(fieldConfig)

switch(rptl) {
	case "Yes":
		score += 1
	break;
	case "No":
		score += 3
}

switch(riskImpact) {
	case "Unknown":
		score += 5
	break;
	case "Service Unavailable":
		score += 3
	break;
	case "Service Degraded":
		score += 2
	break;
	case "Service Noimpact":
		score += 1
	break;
	
}

switch(ma) {
	case "Recover to Previous State":
		score += 1
	break;
	case "Redundant Systems":
		score += 1
	break;
	case "Fail Forward":
		score += 3
	break;
	case "Unknown":
		score += 5
	break;
	
}

switch(rt) {
	case "Less Than 5":
		score += 1
	break;
	case "Less Than 30":
		score += 2
	break;
	case "Less Than 60":
		score += 3
	break;
	case "More Than 60":
		score += 4
	break;
	
}
String changeRisk = ""

if(score == 0) {
    
} else if(score < 5) {
	changeRisk = "Low"
} else if(score < 8) {
	changeRisk = "Medium"
} else if(score < 13) {
	changeRisk = "High"
} else {
	changeRisk = "Critical"
}

if(score > 0) {
	changeRiskFF.setFormValue(options.getOptionForValue(changeRisk, null)?.optionId)
}

FormField priorityFF = getFieldById("priority")

if(priorityFF == null)
	return

switch(changeRisk) {
	case "Critical":
	priorityFF.setFormValue("Priority 1")
	break

	case "High":
	priorityFF.setFormValue("Priority 2")
	break
	
	case "Medium":
	priorityFF.setFormValue("Priority 3")
	break
	
	case "Low":
	priorityFF.setFormValue("Priority 4")
	break
	
	default:
	priorityFF.setFormValue("Priority 4")
	break
}


//Mitigation Activity





import com.onresolve.jira.groovy.user.FormField
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.issue.customfields.manager.OptionsManager
import com.atlassian.jira.issue.fields.CustomField
import com.onresolve.jira.groovy.user.FormField

FormField rptlFF = getFieldByName("Rollback Process Tested")
FormField riskImpactFF = getFieldByName("Risk Impact")
FormField maFF = getFieldByName("Mitigation Activity")
FormField rtFF = getFieldByName("Recover Time")
FormField changeRiskFF = getFieldByName("Change Risk")

String rptl = rptlFF.getValue()
String riskImpact = riskImpactFF.getValue()
String ma = maFF.getValue()
String rt = rtFF.getValue()

int score = 0

def customFieldManager = ComponentAccessor.customFieldManager
CustomField customField = customFieldManager.getCustomFieldObjectByName("Change Risk")
def fieldConfig = customField.getRelevantConfig(issueContext)
OptionsManager optionsManager = ComponentAccessor.optionsManager
def options = optionsManager.getOptions(fieldConfig)

switch(rptl) {
	case "Yes":
		score += 1
	break;
	case "No":
		score += 3
}

switch(riskImpact) {
	case "Unknown":
		score += 5
	break;
	case "Service Unavailable":
		score += 3
	break;
	case "Service Degraded":
		score += 2
	break;
	case "Service Noimpact":
		score += 1
	break;
	
}

switch(ma) {
	case "Recover to Previous State":
		score += 1
	break;
	case "Redundant Systems":
		score += 1
	break;
	case "Fail Forward":
		score += 3
	break;
	case "Unknown":
		score += 5
	break;
	
}

switch(rt) {
	case "Less Than 5":
		score += 1
	break;
	case "Less Than 30":
		score += 2
	break;
	case "Less Than 60":
		score += 3
	break;
	case "More Than 60":
		score += 4
	break;
	
}
String changeRisk = ""

if(score == 0) {
    
} else if(score < 5) {
	changeRisk = "Low"
} else if(score < 8) {
	changeRisk = "Medium"
} else if(score < 13) {
	changeRisk = "High"
} else {
	changeRisk = "Critical"
}

if(score > 0) {
	changeRiskFF.setFormValue(options.getOptionForValue(changeRisk, null)?.optionId)
}

FormField priorityFF = getFieldById("priority")

if(priorityFF == null)
	return

switch(changeRisk) {
	case "Critical":
	priorityFF.setFormValue("Priority 1")
	break

	case "High":
	priorityFF.setFormValue("Priority 2")
	break
	
	case "Medium":
	priorityFF.setFormValue("Priority 3")
	break
	
	case "Low":
	priorityFF.setFormValue("Priority 4")
	break
	
	default:
	priorityFF.setFormValue("Priority 4")
	break
}




//Risk Impact


import com.onresolve.jira.groovy.user.FormField
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.issue.customfields.manager.OptionsManager
import com.atlassian.jira.issue.fields.CustomField
import com.onresolve.jira.groovy.user.FormField

FormField rptlFF = getFieldByName("Rollback Process Tested")
FormField riskImpactFF = getFieldByName("Risk Impact")
FormField maFF = getFieldByName("Mitigation Activity")
FormField rtFF = getFieldByName("Recover Time")
FormField changeRiskFF = getFieldByName("Change Risk")

String rptl = rptlFF.getValue()
String riskImpact = riskImpactFF.getValue()
String ma = maFF.getValue()
String rt = rtFF.getValue()

int score = 0

def customFieldManager = ComponentAccessor.customFieldManager
CustomField customField = customFieldManager.getCustomFieldObjectByName("Change Risk")
def fieldConfig = customField.getRelevantConfig(issueContext)
OptionsManager optionsManager = ComponentAccessor.optionsManager
def options = optionsManager.getOptions(fieldConfig)

switch(rptl) {
	case "Yes":
		score += 1
	break;
	case "No":
		score += 3
}

switch(riskImpact) {
	case "Unknown":
		score += 5
	break;
	case "Service Unavailable":
		score += 3
	break;
	case "Service Degraded":
		score += 2
	break;
	case "Service Noimpact":
		score += 1
	break;
	
}

switch(ma) {
	case "Recover to Previous State":
		score += 1
	break;
	case "Redundant Systems":
		score += 1
	break;
	case "Fail Forward":
		score += 3
	break;
	case "Unknown":
		score += 5
	break;
	
}

switch(rt) {
	case "Less Than 5":
		score += 1
	break;
	case "Less Than 30":
		score += 2
	break;
	case "Less Than 60":
		score += 3
	break;
	case "More Than 60":
		score += 4
	break;
	
}
String changeRisk = ""

if(score == 0) {
    
} else if(score < 5) {
	changeRisk = "Low"
} else if(score < 8) {
	changeRisk = "Medium"
} else if(score < 13) {
	changeRisk = "High"
} else {
	changeRisk = "Critical"
}

if(score > 0) {
	changeRiskFF.setFormValue(options.getOptionForValue(changeRisk, null)?.optionId)
}

FormField priorityFF = getFieldById("priority")

if(priorityFF == null)
	return

switch(changeRisk) {
	case "Critical":
	priorityFF.setFormValue("Priority 1")
	break

	case "High":
	priorityFF.setFormValue("Priority 2")
	break
	
	case "Medium":
	priorityFF.setFormValue("Priority 3")
	break
	
	case "Low":
	priorityFF.setFormValue("Priority 4")
	break
	
	default:
	priorityFF.setFormValue("Priority 4")
	break
}



//Recover Time 


import com.onresolve.jira.groovy.user.FormField
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.issue.customfields.manager.OptionsManager
import com.atlassian.jira.issue.fields.CustomField
import com.onresolve.jira.groovy.user.FormField

FormField rptlFF = getFieldByName("Rollback Process Tested")
FormField riskImpactFF = getFieldByName("Risk Impact")
FormField maFF = getFieldByName("Mitigation Activity")
FormField rtFF = getFieldByName("Recover Time")
FormField changeRiskFF = getFieldByName("Change Risk")

String rptl = rptlFF.getValue()
String riskImpact = riskImpactFF.getValue()
String ma = maFF.getValue()
String rt = rtFF.getValue()

int score = 0

def customFieldManager = ComponentAccessor.customFieldManager
CustomField customField = customFieldManager.getCustomFieldObjectByName("Change Risk")
def fieldConfig = customField.getRelevantConfig(issueContext)
OptionsManager optionsManager = ComponentAccessor.optionsManager
def options = optionsManager.getOptions(fieldConfig)

switch(rptl) {
	case "Yes":
		score += 1
	break;
	case "No":
		score += 3
}

switch(riskImpact) {
	case "Unknown":
		score += 5
	break;
	case "Service Unavailable":
		score += 3
	break;
	case "Service Degraded":
		score += 2
	break;
	case "Service Noimpact":
		score += 1
	break;
	
}

switch(ma) {
	case "Recover to Previous State":
		score += 1
	break;
	case "Redundant Systems":
		score += 1
	break;
	case "Fail Forward":
		score += 3
	break;
	case "Unknown":
		score += 5
	break;
	
}

switch(rt) {
	case "Less Than 5":
		score += 1
	break;
	case "Less Than 30":
		score += 2
	break;
	case "Less Than 60":
		score += 3
	break;
	case "More Than 60":
		score += 4
	break;
	
}
String changeRisk = ""

if(score == 0) {
    
} else if(score < 5) {
	changeRisk = "Low"
} else if(score < 8) {
	changeRisk = "Medium"
} else if(score < 13) {
	changeRisk = "High"
} else {
	changeRisk = "Critical"
}

if(score > 0) {
	changeRiskFF.setFormValue(options.getOptionForValue(changeRisk, null)?.optionId)
}

FormField priorityFF = getFieldById("priority")

if(priorityFF == null)
	return

switch(changeRisk) {
	case "Critical":
	priorityFF.setFormValue("Priority 1")
	break

	case "High":
	priorityFF.setFormValue("Priority 2")
	break
	
	case "Medium":
	priorityFF.setFormValue("Priority 3")
	break
	
	case "Low":
	priorityFF.setFormValue("Priority 4")
	break
	
	default:
	priorityFF.setFormValue("Priority 4")
	break
}




//
