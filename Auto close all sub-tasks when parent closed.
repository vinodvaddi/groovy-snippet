import com.atlassian.jira.ComponentManager

import com.atlassian.jira.issue.comments.CommentManager

import com.opensymphony.workflow.WorkflowContext

import org.apache.log4j.Category

import com.atlassian.jira.config.SubTaskManager

import com.atlassian.jira.workflow.WorkflowTransitionUtil;

import com.atlassian.jira.workflow.WorkflowTransitionUtilImpl;

import com.atlassian.jira.util.JiraUtils;

 log = Category.getInstance("com.onresolve.jira.groovy.AutoCloseChildIssues")

String currentUser = ((WorkflowContext) transientVars.get("context")).getCaller();

WorkflowTransitionUtil workflowTransitionUtil = ( WorkflowTransitionUtil ) JiraUtils.loadComponent( WorkflowTransitionUtilImpl.class );

SubTaskManager subTaskManager = ComponentManager.getInstance().getSubTaskManager();

Collection subTasks = issue.getSubTaskObjects()

if (subTaskManager.subTasksEnabled && !subTasks.empty) {

    subTasks.each {

        log.debug ("issue.statusObject.name: " + issue.statusObject.name)

        workflowTransitionUtil.setIssue(it);

        workflowTransitionUtil.setUsername(currentUser);

        workflowTransitionUtil.setAction (5)    // 5 == RESOLVE ISSUE


        // Add a comment so people have a clue why the child has been closed

        CommentManager commentManager = (CommentManager) ComponentManager.getComponentInstanceOfType(CommentManager.class);

        String comment = "*Resolving* as a result of the *Resolve* action being applied to the parent.";

        commentManager.create(it, currentUser, comment, true);

 

        // validate and transition issue

        workflowTransitionUtil.validate();

        workflowTransitionUtil.progress();

    }
}


                                (OR)
                                
                                
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.issue.Issue
import com.atlassian.jira.issue.IssueInputParametersImpl
import com.atlassian.jira.config.SubTaskManager

Issue issue = issue
def constantManager = ComponentAccessor.getConstantsManager()
def issueService = ComponentAccessor.getIssueService()
def cwdUser = ComponentAccessor.jiraAuthenticationContext.getUser()

SubTaskManager subTaskManager = ComponentAccessor.getSubTaskManager()
Collection subTasks = issue.getSubTaskObjects()
if (subTaskManager.subTasksEnabled && !subTasks.empty) {
    subTasks.each { Issue it ->
        String comment = "*Resolving* as a result of the *Resolve* action being applied to the parent.";
        def issueInputParameters = new IssueInputParametersImpl()

        def doneResolutionId = constantManager.getResolutionObjects().find {it.name == "Done"}?.id
        def doneStatusId = constantManager.getStatusObjects().find {it.name == "Done"}?.id

        issueInputParameters.setResolutionId(doneResolutionId).setStatusId(doneStatusId).setComment(comment)

        def transitionValidationResult = issueService.validateTransition(cwdUser, it.id, 21, issueInputParameters)
         log.debug("Validation result : , transitionValidationResult.errorCollection")
        if (transitionValidationResult.isValid()) {
           log.debug("Transition for sub task " + it.key  + " is valid")
            issueService.transition(cwdUser, transitionValidationResult)
        }

    }
}

